package com.optic_trac;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.UUID;

public class MyActivity extends Activity implements OnTouchListener{
    final int STATUS_OK = 0; // нет подключения
    final int STATUS_1 = 1; // подключаемся
    final int STATUS_2 = 2; // подключено
    final int STATUS_ERROR = 3; // загрузка началась

    final int ROLL = 0;
    final int PITCH = 1;
    final int THROTTLE = 2;
    final int YAW = 3;
    final int REG_CH = 5;
    final int YAW_KOEF = 30;
    final int PITCH_KOEF = 30;
    final int ROLL_KOEF = 30;
    final int THROTTLE_KOEF = 30;




    private int error_count = 0;
    Handler h;
    private static final String TAG = "Optic_bluetooth";
    private static final int REQUEST_ENABLE_BT = 1;
    private BluetoothAdapter btAdapter = null;
    private BluetoothSocket btSocket = null;
    private ConnectedThread mConnectedThread;
    private TimerThread mTimerThread;

    private int[]out_chanels = {0,0,0,0,0,0,0,0};

    TextView tv_angle_x, tv_angle_y;
    TextView tv_acc_x, tv_acc_y, tv_acc_z;
    TextView tv_gyro_x, tv_gyro_y, tv_gyro_z;
    TextView tv_out;
    Button btn_fly, btn_land;
    ImageButton btn_yaw_l, btn_yaw_r;
    ImageButton btn_roll_l, btn_roll_r, btn_pitch_f, btn_pitch_b;
    EditText koef;
    CheckBox chb_x, chb_y;

    // SPP UUID сервиса
    private static final UUID MY_UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
    // MAC-адрес Bluetooth модуля
    private static String address = "00:15:FF:F3:1F:DA";

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        ImageView view = (ImageView) findViewById(R.id.imageView1);
        view.setOnTouchListener(this);

        tv_angle_x = (TextView)findViewById(R.id.angle_x);
        tv_angle_y = (TextView)findViewById(R.id.angle_y);
        tv_acc_x = (TextView)findViewById(R.id.acc_x);
        tv_acc_y = (TextView)findViewById(R.id.acc_y);
        tv_acc_z = (TextView)findViewById(R.id.acc_z);
        tv_gyro_x = (TextView)findViewById(R.id.gyro_x);
        tv_gyro_y = (TextView)findViewById(R.id.gyro_y);
        tv_gyro_z = (TextView)findViewById(R.id.gyro_z);
        tv_out = (TextView)findViewById(R.id.out);
        btn_fly = (Button)findViewById(R.id.fly);
        btn_land = (Button)findViewById(R.id.land);

        btn_yaw_l = (ImageButton)findViewById(R.id.yaw_left);
        btn_yaw_r = (ImageButton) findViewById(R.id.yaw_right);
/*
        btn_pitch_f = (ImageButton) findViewById(R.id.pitch_for);
        btn_pitch_b = (ImageButton) findViewById(R.id.pitch_back);
        btn_roll_l = (ImageButton) findViewById(R.id.roll_left);
        btn_roll_r = (ImageButton) findViewById(R.id.roll_right);
*/
        koef = (EditText) findViewById(R.id.editText1);
        chb_x = (CheckBox) findViewById(R.id.checkBox_X);
        chb_y = (CheckBox) findViewById(R.id.checkBox_Y);
/*
        OnClickListener ocl_Btn = new OnClickListener(){
            public void onClick(View view) {
                switch (view.getId()) {
                    case R.id.fly:
                        break;
                    case R.id.land:
                        break;
                }
            }
        };
        btn_fly.setOnClickListener(ocl_Btn);
        btn_land.setOnClickListener(ocl_Btn);
*/
        OnTouchListener otl_Btn = new OnTouchListener() {
            
            public boolean onTouch(View view, MotionEvent event) {
            	int tmp_koef = Integer.valueOf(koef.getText().toString());
                switch (view.getId()) {
                    case R.id.yaw_left:
                        if (event.getAction() == MotionEvent.ACTION_DOWN) out_chanels[YAW] += YAW_KOEF + tmp_koef;
                        if (event.getAction() == MotionEvent.ACTION_UP) out_chanels[YAW] -= YAW_KOEF + tmp_koef;
                        break;
                    case R.id.yaw_right:
                        if (event.getAction() == MotionEvent.ACTION_DOWN) out_chanels[YAW] -= YAW_KOEF + tmp_koef;
                        if (event.getAction() == MotionEvent.ACTION_UP) out_chanels[YAW] += YAW_KOEF + tmp_koef;
                        break;
/*
                    case R.id.roll_left:
                        if (event.getAction() == MotionEvent.ACTION_DOWN) out_chanels[ROLL] -= ROLL_KOEF + tmp_koef;
                        if (event.getAction() == MotionEvent.ACTION_UP) out_chanels[ROLL] += ROLL_KOEF + tmp_koef;
                        break;
                    case R.id.roll_right:
                        if (event.getAction() == MotionEvent.ACTION_DOWN) out_chanels[ROLL] += ROLL_KOEF + tmp_koef;
                        if (event.getAction() == MotionEvent.ACTION_UP) out_chanels[ROLL] -= ROLL_KOEF + tmp_koef;
                        break;
                    case R.id.pitch_back:
                        if (event.getAction() == MotionEvent.ACTION_DOWN) out_chanels[PITCH] -= PITCH_KOEF + tmp_koef;
                        if (event.getAction() == MotionEvent.ACTION_UP) out_chanels[PITCH] += PITCH_KOEF + tmp_koef;
                        break;
                    case R.id.pitch_for:
                        if (event.getAction() == MotionEvent.ACTION_DOWN) out_chanels[PITCH] += PITCH_KOEF + tmp_koef;
                        if (event.getAction() == MotionEvent.ACTION_UP) out_chanels[PITCH] -= PITCH_KOEF + tmp_koef;
                        break;
*/
                    case R.id.fly:
                        if (event.getAction() == MotionEvent.ACTION_DOWN) out_chanels[THROTTLE] += THROTTLE_KOEF + tmp_koef;
                        if (event.getAction() == MotionEvent.ACTION_UP) out_chanels[THROTTLE] -= THROTTLE_KOEF + tmp_koef;
                        break;
                    case R.id.land:
                        if (event.getAction() == MotionEvent.ACTION_DOWN) out_chanels[THROTTLE] -= THROTTLE_KOEF + tmp_koef;
                        if (event.getAction() == MotionEvent.ACTION_UP) out_chanels[THROTTLE] += THROTTLE_KOEF + tmp_koef;
                        break;
                }
                return false;
            }
        };
        btn_yaw_l.setOnTouchListener(otl_Btn);
        btn_yaw_r.setOnTouchListener(otl_Btn);
/*
        btn_roll_l.setOnTouchListener(otl_Btn);
        btn_roll_r.setOnTouchListener(otl_Btn);
        btn_pitch_f.setOnTouchListener(otl_Btn);
        btn_pitch_b.setOnTouchListener(otl_Btn);
*/
        btn_fly.setOnTouchListener(otl_Btn);
        btn_land.setOnTouchListener(otl_Btn);


        h = new Handler() {
            public void handleMessage(android.os.Message msg) {
                switch (msg.what) {
                    case STATUS_OK:
                        byte[] readBuf = (byte[]) msg.obj;// если приняли сообщение в Handler

                        break;
                    case STATUS_ERROR:
                        Log.d(TAG, "...Пакетов с ошибками - " + (++error_count) + "...");
                        break;
                    case STATUS_1:
                        break;
                    case STATUS_2:
                        tv_out.setText("out : " + out_chanels[0] + "; " + out_chanels[1] + "; " + out_chanels[2] + "; " + out_chanels[3] + "; " + out_chanels[4] + "; " + out_chanels[5] + "; " + out_chanels[6] + "; " + out_chanels[7]);
                        break;
                }
            };
        };

        btAdapter = BluetoothAdapter.getDefaultAdapter();		// получаем локальный Bluetooth адаптер
        checkBTState();

    }
    @Override
    protected void onResume() {
        super.onResume();

        Log.d(TAG, "...onResume - попытка соединения...");

        // Set up a pointer to the remote node using it's address.
        BluetoothDevice device = btAdapter.getRemoteDevice (address);

        // Two things are needed to make a connection:
        //   A MAC address, which we got above.
        //   A Service ID or UUID.  In this case we are using the
        //     UUID for SPP.
        try {
            btSocket = device.createRfcommSocketToServiceRecord(MY_UUID);
        } catch (IOException e) {
            errorExit("Fatal Error", "In onResume() and socket create failed: " + e.getMessage() + ".");
        }

        // Discovery is resource intensive.  Make sure it isn't going on
        // when you attempt to connect and pass your message.
        btAdapter.cancelDiscovery();

        // Establish the connection.  This will block until it connects.
        Log.d(TAG, "...Соединяемся...");
        try {
            btSocket.connect();
            Log.d(TAG, "...Соединение установлено и готово к передачи данных...");
        } catch (IOException e) {
            try {
                btSocket.close();
            } catch (IOException e2) {
                errorExit("Fatal Error", "In onResume() and unable to close socket during connection failure" + e2.getMessage() + ".");
            }
        }

        // Create a data stream so we can talk to server.
        Log.d(TAG, "...Создание Socket...");

        mConnectedThread = new ConnectedThread(btSocket);
        mConnectedThread.start();
        mTimerThread = new TimerThread();
        mTimerThread.start();

    }

    @Override
    protected void onStop() {
        super.onStop();
    }
    @Override
    public void onPause() {
        super.onPause();

        Log.d(TAG, "...In onPause()...");

        try     {
            btSocket.close();
        } catch (IOException e2) {
            errorExit("Fatal Error", "In onPause() and failed to close socket." + e2.getMessage() + ".");
        }
    }
    private void checkBTState() {
        // Check for Bluetooth support and then check to make sure it is turned on
        // Emulator doesn't support Bluetooth and will return null
        if(btAdapter==null) {
            errorExit("Fatal Error", "Bluetooth не поддерживается");
        } else {
            if (btAdapter.isEnabled()) {
                Log.d(TAG, "...Bluetooth включен...");
            } else {
                //Prompt user to turn on Bluetooth
                Intent enableBtIntent = new Intent(btAdapter.ACTION_REQUEST_ENABLE);
                startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
            }
        }
    }

    private void errorExit(String title, String message){
        Toast.makeText(getBaseContext(), title + " - " + message, Toast.LENGTH_LONG).show();
        finish();
    }

    private class ConnectedThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final InputStream mmInStream;
        private final OutputStream mmOutStream;

        public ConnectedThread(BluetoothSocket socket) {
            mmSocket = socket;
            InputStream tmpIn = null;
            OutputStream tmpOut = null;

            // Get the input and output streams, using temp objects because
            // member streams are final
            try {
                tmpIn = socket.getInputStream();
                tmpOut = socket.getOutputStream();
            } catch (IOException e) { }

            mmInStream = tmpIn;
            mmOutStream = tmpOut;
        }

        public void run() {
            byte[] buffer = new byte[18];  // buffer store for the stream
            int bytes; // bytes returned from read()
            int in_byte;

            // Keep listening to the InputStream until an exception occurs
            while (true) {
                try {
                    do {
                        in_byte = mmInStream.read() ;
//                        h.obtainMessage(STATUS_1, in_byte,(in_byte & 0x000000FF)).sendToTarget();
                    } while ((in_byte & 0x000000FF) != 0x99);

                    for(int i=0; i<18;i++) buffer[i] = (byte) mmInStream.read();
                    in_byte =  mmInStream.read() ;
                    if((in_byte & 0x000000FF) == 0x88){
                        h.obtainMessage(STATUS_OK, 6, -1, buffer).sendToTarget();
                    }else{
                        in_byte = mmInStream.read() ;
                        h.sendEmptyMessage(STATUS_ERROR);
                    }
                } catch (IOException e) {
                    break;
                }
            }
        }

        /* Call this from the main activity to send data to the remote device */
        public void write(byte[] message) {
//            Log.d(TAG, "...Данные для отправки: " + message + "...");
            try {
                mmOutStream.write(0x99);
                mmOutStream.write(message);
                mmOutStream.write(0x88);
            } catch (IOException e) {
                Log.d(TAG, "...Ошибка отправки данных: " + e.getMessage() + "...");
            }
        }
    }

    private class TimerThread extends Thread {
        private byte[] byte_message = new byte[16];
        public TimerThread (){   }
        public void run(){
            while(true){
                for(int tmp = 0; tmp < 8; tmp++) {
                    byte_message[tmp * 2] = (byte) (out_chanels[tmp] & 0xFF);
                    byte_message[tmp * 2 + 1] = (byte) ((out_chanels[tmp] & 0xFF00) >> 8);
                }
                mConnectedThread.write(byte_message);
                h.sendEmptyMessage(STATUS_2);
                try {
                    Thread.sleep(20);
                } catch (InterruptedException e) {
                    Log.d(TAG, "...Ошибка метода Thread.sleep: " + e.getMessage() + "...");
                }
            }
        }
    }

    public boolean onTouch(View v, MotionEvent event) {
    	switch (event.getAction()) {
		case MotionEvent.ACTION_DOWN:
			if (chb_x.isChecked()){
				out_chanels[ROLL] = (int) event.getX() - 200;
			}else{
				out_chanels[ROLL] = -((int) event.getX() - 200);
			}
			if (chb_y.isChecked()){
				out_chanels[PITCH] = (int) event.getY() - 200;
			}else{
				out_chanels[PITCH] = -((int) event.getY() - 200);
			}
			break;
		case MotionEvent.ACTION_UP:
			out_chanels[ROLL] = 0;
			out_chanels[PITCH] = 0;
			break;
		case MotionEvent.ACTION_MOVE:
			if (chb_x.isChecked()){
				out_chanels[ROLL] = (int) event.getX() - 200;
			}else{
				out_chanels[ROLL] = -((int) event.getX() - 200);
			}
			if (chb_y.isChecked()){
				out_chanels[PITCH] = (int) event.getY() - 200;
			}else{
				out_chanels[PITCH] = -((int) event.getY() - 200);
			}
			
			break;


		default:
			break;
		}
		return true;
	}
}
